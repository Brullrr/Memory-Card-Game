{"version":3,"sources":["MemoryCardGame/components/WorldMapComponent/WorldMap.module.css","MemoryCardGame/components/Stages/StageTwoComponent/StageTwo.module.css","MemoryCardGame/reusables/gameBoard/GameBoard.module.css","MemoryCardGame/reusables/Images/Imp.png","MemoryCardGame/reusables/Images/StageTwo/Crit.PNG","MemoryCardGame/reusables/Images/StageTwo/Racoon.png","MemoryCardGame/reusables/Images/StageTwo/Squirrel.png","MemoryCardGame/reusables/Images/StageTwo/Goose.png","MemoryCardGame/reusables/Images/StageTwo/Dino.png","MemoryCardGame/components/Stages/StageOneComponent/StageOne.module.css","MemoryCardGame/components/Stages/StageThreeComponent/StageThree.module.css","MemoryCardGame/components/FirstTimeCompenent/FirstTime.module.css","MemoryCardGame/reusables/Images/StageOne/Frog.png","MemoryCardGame/reusables/Images/SpeechBubble.png","MemoryCardGame/reusables/Overlay/Overlay.module.css","MemoryCardGame/reusables/Images/StageOne/Draftfish.png","MemoryCardGame/reusables/Images/StageOne/DraftfishBlue.png","MemoryCardGame/reusables/Images/StageOne/DraftfishBlack.png","MemoryCardGame/reusables/Images/StageOne/DraftfishDarkGreen.png","MemoryCardGame/reusables/Images/StageOne/DraftfishDarkPurple.png","MemoryCardGame/reusables/Images/StageOne/DraftfishGreen.png","MemoryCardGame/reusables/Images/StageOne/DraftfishGrey.png","MemoryCardGame/reusables/Images/StageOne/DraftfishOrange.png","MemoryCardGame/reusables/Images/StageOne/DraftfishPurple.png","MemoryCardGame/reusables/Images/StageOne/DraftfishRed.png","MemoryCardGame/reusables/Images/StageOne/DraftfishTeal.png","MemoryCardGame/reusables/Images/StageOne/DraftfishYellow.png","MemoryCardGame/reusables/Images/StageThree/ImoWhite.png","MemoryCardGame/reusables/Images/StageThree/ImoDarkBlue.png","MemoryCardGame/reusables/Images/StageThree/ImoBlack.png","MemoryCardGame/reusables/Images/StageThree/ImoDarkGreen.png","MemoryCardGame/reusables/Images/StageThree/ImoDarkPurple.png","MemoryCardGame/reusables/Images/StageThree/ImoLightGreen.png","MemoryCardGame/reusables/Images/StageThree/ImoGrey.png","MemoryCardGame/reusables/Images/StageThree/ImoOrange.png","MemoryCardGame/reusables/Images/StageThree/ImoLightPurple.png","MemoryCardGame/reusables/Images/StageThree/ImoRed.png","MemoryCardGame/reusables/Images/StageThree/ImoLightBlue.png","MemoryCardGame/reusables/Images/StageThree/ImoYellow.png","MemoryCardGame/reusables/Images/StageThree/GoolWhite.png","MemoryCardGame/reusables/Images/StageThree/GoolDarkBlue.png","MemoryCardGame/reusables/Images/StageThree/GoolBlack.png","MemoryCardGame/reusables/Images/StageThree/GoolDarkGreen.png","MemoryCardGame/reusables/Images/StageThree/GoolDarkPurple.png","MemoryCardGame/reusables/Images/StageThree/GoolLightGreen.png","MemoryCardGame/reusables/Images/StageThree/GoolGrey.png","MemoryCardGame/reusables/Images/StageThree/GoolOrange.png","MemoryCardGame/reusables/Images/StageThree/GoolLightPurple.png","MemoryCardGame/reusables/Images/StageThree/GoolRed.png","MemoryCardGame/reusables/Images/StageThree/GoolLightBlue.png","MemoryCardGame/reusables/Images/StageThree/GoolYellow.png","MemoryCardGame/reusables/Overlay/Overlay.js","MemoryCardGame/components/FirstTimeCompenent/FirstTime.js","store/actionTypes/actionTypes.js","MemoryCardGame/components/WorldMapComponent/WorldMap.js","MemoryCardGame/reusables/gameBoard/GameBoard.js","MemoryCardGame/reusables/Shuffle/shuffle.js","MemoryCardGame/components/Stages/StageOneComponent/StageOne.js","MemoryCardGame/components/Stages/StageTwoComponent/StageTwo.js","MemoryCardGame/components/Stages/StageThreeComponent/StageThree.js","MemoryCardGame/MemoryCardGame.js","App.js","serviceWorker.js","store/reducers/overlayReducer.js","store/reducers/firstVisitReducer.js","store/reducers/instructionsReducer.js","store/reducers/stageOneReducer.js","store/reducers/stageTwoReducer.js","store/reducers/stageThreeReducer.js","index.js"],"names":["module","exports","connect","state","isOverlayOn","vrlyrdcr","props","overlay","className","classes","Overlay","instructionsNum","nstrctnsrdcr","instructionsNumber","dispatch","incrementInstructionNumber","type","console","log","loopInstructions","setInterval","setTimeout","clearInterval","FirstTime","WordBox","ImpHolder","Imp","src","ImpImg","alt","isStageOneComplete","stgnrdcr","isStageTwoComplete","stgtwrdcr","isStageThreeComplete","stgthrrdcr","candidate","stageOneWords","StageOneWords","stageOne","StageOne","Frog","frog","stageTwoWords","StageTwoWords","stageTwo","StageTwo","to","style","textDecoration","sourceCandidate","Crit","Racoon","Squirrel","Goose","Dino","stageThreeWords","stageThree","StageThree","FrogHolder","WorldMap","StageFour","GameBoard","cardsArray","cards","gameboardClass","stage","Lost","GameBoardStageTwoLose","GameBoardStageTwo","GameBoardLose","map","ele","Card","key","onClick","clicked","Image","shuffle","flashcards","currentIndex","length","temporaryValue","Number","randomIndex","Math","floor","random","clickedOnArray","clickedOn","isStageOneLost","stageOneLost","clickedCard","clearClickedOn","stageOneComplete","stageOneLostRevert","draftfish","draftfishBlack","draftfishBlue","draftfishDarkGreen","draftfishDarkPurple","draftfishGreen","draftfishGrey","draftfishOrange","draftfishPurple","draftfishRed","draftfishTeal","draftfishYellow","frogPhrase","gameboard","every","e","Victory","StageOneBody","SpeechBubble","speechBubble","vills","stageTwoCompleted","becomeCandidate","name","showVills","element","sourceVill","border","VillagerHolder","Vill","Description","description","StageTwoBody","Villagers","isStageThreeLost","stageThreeLost","stageThreeComplete","stageThreeLostRevert","GoolWhite","GoolBlack","GoolDarkBlue","GoolDarkGreen","GoolDarkPurple","GoolLightGreen","GoolGrey","GoolOrange","GoolLightPurple","GoolRed","GoolLightBlue","GoolYellow","ImoWhite","ImoBlack","ImoDarkBlue","ImoDarkGreen","ImoDarkPurple","ImoLightGreen","ImoGrey","ImoOrange","ImoLightPurple","ImoRed","ImoLightBlue","ImoYellow","attackPhrase","StageThreeBody","CandidateHolder","isUserFirstVisit","frsttmvstrdcr","turnOffOverlay","turnOffFirstVisit","firstTime","worldMap","path","exact","render","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","reducer","action","firstVisitReducer","timerIsRunning","instructionsReducer","stageOnereducer","concat","stageTwoLost","stageTwoReducer","persistedState","localStorage","getItem","JSON","parse","rootReducer","combineReducers","overlayReducer","stageOneReducer","stageThreeReducer","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,2BAA2B,WAAa,6BAA6B,UAAY,4BAA4B,KAAO,uBAAuB,cAAgB,gCAAgC,cAAgB,gCAAgC,UAAY,4BAA4B,IAAM,wB,sBCAlYD,EAAOC,QAAU,CAAC,aAAe,+BAA+B,UAAY,4BAA4B,IAAM,sBAAsB,UAAY,4BAA4B,eAAiB,iCAAiC,KAAO,uBAAuB,YAAc,gC,iBCA1QD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,cAAgB,iCAAiC,MAAQ,yBAAyB,kBAAoB,qCAAqC,sBAAwB,yCAAyC,KAAO,wBAAwB,MAAQ,2B,iBCD9SD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,aAAe,+BAA+B,WAAa,6BAA6B,KAAO,uBAAuB,aAAe,+BAA+B,QAAU,4B,gBCAhMD,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,gBAAkB,oCAAoC,UAAY,8BAA8B,aAAe,iCAAiC,QAAU,8B,kBCAhOD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,UAAY,6BAA6B,IAAM,uBAAuB,QAAU,6B,kBCD3ID,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,uBCC3CD,EAAOC,QAAU,CAAC,QAAU,2B,iBCD5BD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,6LC4B5BC,eANS,SAAAC,GACpB,MAAO,CACHC,YAAaD,EAAME,SAASD,eAIrBF,EAxBC,SAACI,GAEb,IAAIC,EAAU,KAMd,OALGD,EAAMF,cACNG,EAAU,yBAAKC,UAAWC,IAAQC,WAKjC,kBAAC,WAAD,KACKH,M,kCCmEEL,eANS,SAAAC,GACpB,MAAO,CACHQ,gBAAiBR,EAAMS,aAAaC,uBARjB,SAAAC,GACvB,MAAO,CACHC,2BAA4B,kBAAMD,EAAS,CAACE,KCpEZ,iCD8EzBd,EA3EG,SAACI,GAmCf,GAA6B,IAA1BA,EAAMK,gBAAuB,CAC5BM,QAAQC,IAAI,mBACZ,IAAIC,EAAmBC,aAAa,WAAQd,EAAMS,+BAA+B,MAEjFM,YAAW,WACPC,cAAcH,KACf,MAIP,OACI,kBAAC,WAAD,KACI,yBAAKX,UAAWC,IAAQc,WACpB,yBAAKf,UAAWC,IAAQe,SACxB,2BAhDY,CACpB,gBACA,iBACA,qBACA,6BACA,eACA,gBACA,yBACA,eACA,YACA,qBACA,iBACA,4BACA,sBACA,yBACA,UACA,eACA,uBACA,qBACA,SACA,eACA,eACA,UACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAkB8BlB,EAAMK,mBAE5B,yBAAKH,UAAWC,IAAQgB,WACpB,yBAAKjB,UAAWC,IAAQiB,IAAKC,IAAKC,IAAQC,IAAI,c,6HE8DnD3B,eATS,SAAAC,GACpB,MAAO,CACH2B,mBAAoB3B,EAAM4B,SAASD,mBACnCE,mBAAoB7B,EAAM8B,UAAUD,mBACpCE,qBAAsB/B,EAAMgC,WAAWD,qBACvCE,UAAWjC,EAAM8B,UAAUG,aAIpBlC,EA3GE,SAACI,GAId,IAAI+B,EAAgB/B,EAAMwB,mBAAqB,yBAAKtB,UAAWC,IAAQ6B,eAC/C,yCACA,gEAEJ,yBAAK9B,UAAWC,IAAQ6B,eACpB,yCACA,2EAGpBC,EAAW,yBAAK/B,UAAWC,IAAQ+B,UACnB,yBAAKhC,UAAWC,IAAQgC,MACpB,yBAAKd,IAAKe,IAAMb,IAAI,UAEvBQ,GAGjBM,EAAgBrC,EAAM0B,mBAAqB,yBAAKxB,UAAWC,IAAQmC,eAC/C,iDACA,kEAEJ,yBAAKpC,UAAWC,IAAQmC,eACpB,yCACA,4EAGpBC,EAAW,yBAAKrC,UAAWC,IAAQqC,UACnB,yBAAKtC,UAAWC,IAAQgB,WACpB,yBAAKjB,UAAWC,IAAQiB,IAAKC,IAAKD,IAAKG,IAAI,SAE9Cc,GAGjBE,EAAWvC,EAAMwB,mBAAqB,kBAAE,IAAF,CAAOiB,GAAG,YAAYC,MAAO,CAACC,eAAgB,SAAWJ,GAAmB,yBAAKrC,UAAWC,IAAQqC,WAG1I,IAAII,EAAkB,KAEtB,OAAQ5C,EAAM8B,WACV,IAAK,OACDc,EAAkBC,IAClB,MACJ,IAAK,SACDD,EAAkBE,IAClB,MACJ,IAAK,WACDF,EAAkBG,IAClB,MACJ,IAAK,QACDH,EAAkBI,IAClB,MACJ,IAAK,OACDJ,EAAkBK,IAClB,MAEJ,QACIL,EAAkB,KAGzB,IAAIM,EAAkBlD,EAAM4B,qBAAuB,yBAAK1B,UAAWC,IAAQmC,eACxD,oDACA,kEAEJ,yBAAKpC,UAAWC,IAAQmC,eACpB,2DACA,+EAGhBa,EAAgB,yBAAKjD,UAAWC,IAAQiD,YAC5B,yBAAKlD,UAAWC,IAAQkD,YACpB,yBAAKnD,UAAWC,IAAQgC,KAAMd,IAAKuB,EAAiBrB,IAAI,SAEnD2B,GAK7B,OAFIC,EAAanD,EAAM0B,mBAAqB,kBAAE,IAAF,CAAOe,GAAG,cAAcC,MAAO,CAACC,eAAgB,SAAUQ,EAA1D,KAAgF,yBAAKjD,UAAWC,IAAQiD,aAGhJ,kBAAC,WAAD,KACI,yBAAKlD,UAAWC,IAAQmD,UACpB,kBAAE,IAAF,CAAOb,GAAG,YAAYC,MAAO,CAACC,eAAgB,SAAWV,GAExDM,EACAY,EAED,kBAAE,IAAF,CAAOV,GAAG,aAAaC,MAAO,CAACC,eAAgB,SAC3C,yBAAKzC,UAAWC,IAAQoD,WAAW,2C,iDC3ExCC,EAxBG,SAACxD,GAEf,IAAIyD,EAAU,YAAOzD,EAAM0D,OAEvBC,EAAiC,MAAhB3D,EAAM4D,MAAgB5D,EAAM6D,KAAO1D,IAAQ2D,sBAAwB3D,IAAQ4D,kBAAoB/D,EAAM6D,KAAO1D,IAAQ6D,cAAgB7D,IAAQqD,UAEjK,OACI,yBAAKtD,UAAWyD,GACXF,EAAWQ,KAAI,SAACC,GACb,OAAQ,yBACIhE,UAAWC,IAAQgE,KACnBC,IAAKF,EACLG,QAAS,WACTrE,EAAMsE,QAAQJ,KAEd,yBAAK3C,IAAI,OAAOrB,UAAWC,IAAQoE,MAAOlD,IAAK6C,UCD5DM,EAjBC,SAACC,GAKb,IAJA,IAAIC,EAAeD,EAAWE,OAC1BC,EAAiBC,OACjBC,EAAcD,OAEK,IAAjBH,GACFI,EAAcC,KAAKC,MAAMD,KAAKE,SAASP,GAGvCE,EAAiBH,EAFjBC,GAAgB,GAGhBD,EAAWC,GAAgBD,EAAWK,GACtCL,EAAWK,GAAeF,EAG9B,OAAOH,G,+OC+EI7E,gBAnBS,SAAAC,GACpB,MAAO,CACH2B,mBAAoB3B,EAAM4B,SAASD,mBACnC0D,eAAgBrF,EAAM4B,SAAS0D,UAC/BC,eAAgBvF,EAAM4B,SAAS4D,iBAKZ,SAAA7E,GACvB,MAAO,CACH2E,UAAW,SAACjB,GAAD,OAAS1D,EAAS,CAACE,KJhFF,uBIgF0C4E,YAAapB,KACnFqB,eAAgB,kBAAM/E,EAAS,CAACE,KJhFE,gCIiFlC8E,iBAAkB,kBAAMhF,EAAS,CAACE,KJhFP,yBIiF3B2E,aAAc,kBAAM7E,EAAS,CAACE,KJhFR,oBIiFtB+E,mBAAoB,kBAAMjF,EAAS,CAACE,KJhFP,8BIoFtBd,EArEE,SAACI,GAGd,IAAIyD,EAAa,CAACiC,IAAWC,IAAgBC,IAAeC,IAAoBC,IAAqBC,IAAgBC,IACjGC,KAAiBC,KAAiBC,KAAcC,KAAeC,MAGnF5C,EAAae,EAAQf,GAErB,IAAI6C,EAAatG,EAAMwB,mBAAqB,aAAe,2BACvD6D,IAAerF,EAAMoF,eAmBrBmB,EAAY,kBAAC,EAAD,CAAW7C,MAAOD,EAAYa,QALzB,SAACJ,GAClBlE,EAAMkF,eAAesB,OAAM,SAACC,GAAD,OAAOA,IAAMvC,KAAOlE,EAAMkF,eAAeP,SAAWlB,EAAWkB,OAAO,GANjG3E,EAAMuF,iBACNvF,EAAMwF,oBAKgHxF,EAAMmF,UAAUjB,IAZtIlE,EAAMuF,iBACNvF,EAAMqF,eACNtE,WAAWf,EAAMyF,mBAAoB,QAc8B5B,KAAMwB,EAAczB,MAAM,MAMjG,OAJG5D,EAAMwB,qBACL+E,EAAY,yBAAKrG,UAAWC,IAAQuG,SAAxB,cAA4C,6BAA5C,kCAIZ,yBAAKxG,UAAWC,IAAQwG,cACpB,6BACI,yBAAKzG,UAAWC,IAAQkD,YACpB,kBAAC,IAAD,CAAMZ,GAAG,KACL,yBAAKvC,UAAWC,IAAQgC,KAAMd,IAAKe,IAAMb,IAAI,WAGrD,yBAAKrB,UAAWC,IAAQyG,cAAc,yBAAKvF,IAAMwF,KAActF,IAAI,cAAkB,2BAAI+E,EAAW,6BAAf,0BAExFC,M,oBCkBE3G,gBAfS,SAAAC,GACpB,MAAO,CACHiH,MAAOjH,EAAM8B,UAAUmF,MACvBpF,mBAAoB7B,EAAM8B,UAAUD,mBACpCI,UAAWjC,EAAM8B,UAAUG,cAIR,SAAAtB,GACvB,MAAO,CACHuG,kBAAmB,kBAAMvG,EAAS,CAACE,KLvER,yBKwE3BsG,gBAAiB,SAACC,GAAD,OAAUzG,EAAS,CAACE,KLvEb,mBKuEiDuG,KAAMA,QAIxErH,EA1EE,SAACI,GAGdW,QAAQC,IAAI,oBAAsBZ,EAAM8G,OAExC,IAEII,EAFK,YAAOlH,EAAM8G,OAEA7C,KAAI,SAACkD,GAEvB,IAAIC,EAAa,KAEjB,OAAQD,EAAQF,MACZ,IAAK,OACDG,EAAavE,IACb,MACJ,IAAK,SACDuE,EAAatE,IACb,MACJ,IAAK,WACDsE,EAAarE,IACb,MACJ,IAAK,QACDqE,EAAapE,IACb,MACJ,IAAK,OACDoE,EAAanE,IACb,MAEJ,QACImE,EAAa,KAIrB,IAAIC,EAASrH,EAAM8B,YAAcqF,EAAQF,KAAQ,kBAAqB,KACtE,OACI,yBAAK/G,UAAWC,KAAQmH,gBACpB,yBAAKpH,UAAWC,KAAQoH,KAAMlG,IAAK+F,EAAY7F,IAAK4F,EAAQF,KAAM5C,QAAS,WAAOrE,EAAMgH,gBAAgBG,EAAQF,OAASvE,MAAO,CAC5H2E,OAAQA,KAEZ,uBAAGnH,UAAWC,KAAQqH,aAAcL,EAAQM,iBAMxD,OACI,yBAAKvH,UAAWC,KAAQuH,cAEpB,yBAAKxH,UAAWC,KAAQgB,WACxB,kBAAC,IAAD,CAAMsB,GAAG,KAAI,yBAAKvC,UAAWC,KAAQiB,IAAKC,IAAKD,IAAKiD,QAASrE,EAAM+G,kBAAmBxF,IAAI,SACtF,2BAAIvB,EAAM0B,mBAAqB,sCAAwC,qCAE3E,yBAAKxB,UAAWC,KAAQwH,WACnBT,O,ofC2EFtH,gBAlBS,SAAAC,GACpB,MAAO,CACH+B,qBAAsB/B,EAAMgC,WAAWD,qBACvCE,UAAWjC,EAAM8B,UAAUG,UAC3B8F,iBAAkB/H,EAAMgC,WAAWgG,eACnC3C,eAAgBrF,EAAMgC,WAAWsD,cAId,SAAA3E,GACvB,MAAO,CACH2E,UAAW,SAACjB,GAAD,OAAS1D,EAAS,CAACE,KNvHA,yBMuH0C4E,YAAapB,KACrFqB,eAAgB,kBAAM/E,EAAS,CAACE,KNvHI,kCMwHpCoH,mBAAoB,kBAAMtH,EAAS,CAACE,KNvHP,2BMwH7BmH,eAAgB,kBAAMrH,EAAS,CAACE,KNvHR,sBMwHxBqH,qBAAsB,kBAAMvH,EAAS,CAACE,KNvHP,gCM0HxBd,EAnGI,SAACI,GAEhB,IAAIyD,EAAa,CAACuE,KAAWC,KAAWC,KAAcC,KAAeC,KAAgBC,KAAgBC,KACjGC,KAAYC,KAAiBC,KAASC,KAAeC,KAAYC,KAAUC,KAAUC,KAAaC,KAAcC,KAAeC,KAAeC,KAC9IC,KAAWC,KAAgBC,KAAQC,KAAcC,MAGrD9F,EAAae,EAAQf,GAErB,IAmBIoE,IAAiB7H,EAAM4H,iBAE3BjH,QAAQC,IAAI,8CAAgDiH,GAC5D,IAAItB,EAAY,kBAAC,EAAD,CAAW7C,MAAOD,EAAYI,KAAMgE,EAAgBjE,MAAM,IAAIU,QAPzD,SAACJ,GAClBlE,EAAMkF,eAAesB,OAAM,SAACC,GAAD,OAAOA,IAAMvC,KAAOlE,EAAMkF,eAAeP,SAAWlB,EAAWkB,OAAO,GANjG3E,EAAMuF,iBACNvF,EAAM8H,sBAKgH9H,EAAMmF,UAAUjB,IAftIlE,EAAMuF,iBACNvF,EAAM6H,iBACN9G,YAAW,WACPf,EAAM+H,yBAEP,UAiBJ/H,EAAM4B,uBACL2E,EAAY,yBAAKrG,UAAWC,KAAQuG,SAAxB,cAA4C,6BAA5C,mCAIhB,IAAI9D,EAAkB,KAClB4G,EAAe,KAEf,OAAQxJ,EAAM8B,WACV,IAAK,OACDc,EAAkBC,IAClB2G,EAAe,oDACf,MACJ,IAAK,SACD5G,EAAkBE,IAClB0G,EAAe,iBACf,MACJ,IAAK,WACD5G,EAAkBG,IAClByG,EAAe,4CACf,MACJ,IAAK,QACD5G,EAAkBI,IAClBwG,EAAe,gDACf,MACJ,IAAK,OACD5G,EAAkBK,IAClBuG,EAAe,uCACf,MAEJ,QACI5G,EAAkB,KAClB4G,EAAe,KAG3B,OACI,yBAAKtJ,UAAWC,KAAQsJ,gBACxB,6BACI,yBAAKvJ,UAAWC,KAAQuJ,iBACpB,kBAAC,IAAD,CAAMjH,GAAG,KACL,yBAAKvC,UAAWC,KAAQuJ,gBAAiBrI,IAAKuB,EAAiBrB,IAAI,gBAG3E,yBAAKrB,UAAWC,KAAQyG,cAAc,yBAAKvF,IAAMwF,KAActF,IAAI,cAAkB,2BAAIiI,KAE5FjD,MC1DM3G,gBANS,SAAAC,GACpB,MAAO,CACHC,YAAaD,EAAME,SAASD,YAC5B6J,iBAAkB9J,EAAM+J,cAAcD,qBAVnB,SAAAnJ,GACvB,MAAO,CACHqJ,eAAgB,kBAAMrJ,EAAS,CAACE,KPlDR,sBOmDxBoJ,kBAAmB,kBAAMtJ,EAAS,CAACE,KPjDP,6BO2DrBd,EAlDQ,SAACI,GAEpB,IAAIC,EAAU,KACV8J,EAAY,KACZC,EAAW,kBAAC,EAAD,MAYf,OAVGhK,EAAM2J,mBACL1J,EAAU,kBAAC,EAAD,MACV8J,EAAY,kBAAC,EAAD,MACZC,EAAW,KACXjJ,YAAW,WACPf,EAAM6J,iBACN7J,EAAM8J,sBACP,MAIP,kBAAC,WAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAACC,OAAQ,WAC1B,OAAQ,6BACHlK,EACA8J,EACAC,MAIT,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,OAAS,kBAAM,kBAAC,GAAD,SAC7C,kBAAC,IAAD,CAAOF,KAAK,YAAYC,OAAK,EAACC,OAAS,kBAAM,kBAAC,GAAD,SAC7C,kBAAC,IAAD,CAAOF,KAAK,cAAcC,OAAK,EAACC,OAAS,kBAAM,kBAAC,GAAD,SAC/C,kBAAC,IAAD,CAAOF,KAAK,aAAaC,OAAK,EAACC,OAAS,kBAAM,6CC/B3CC,OANf,WACE,OACE,kBAAC,GAAD,OCMEC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvL,QACfiL,UAAUC,cAAcQ,YAI1B5K,QAAQC,IACN,iHAKEiK,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBvK,QAAQC,IAAI,sCAGRiK,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLhL,QAAQgL,MAAM,4CAA6CA,M,qBC7F3DC,GAAe,CACjB9L,aAAa,GAsBF+L,GAnBC,WAAmC,IAAlChM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCAE9C,OAAOA,EAAOpL,MACV,IVTuB,kBUUnB,OAAO,6BACAb,GADP,IAEIC,aAAa,IAErB,IVfwB,mBUgBpB,OAAO,6BACAD,GADP,IAEIC,aAAa,IAErB,QACK,OAAOD,ICnBd+L,GAAe,CACjBjC,kBAAkB,GAaPoC,GAVW,WAAmC,IAAlClM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCACxD,MXLgC,yBWK7BA,EAAOpL,KACC,6BACAb,GADP,IAEI8J,kBAAkB,IAGnB9J,GCXL+L,GAAe,CACjBI,gBAAgB,EAChBzL,mBAAoB,GAkBT0L,GAfa,WAAmC,IAAlCpM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCAC1D,MZLoC,6BYKjCA,EAAOpL,MACNC,QAAQC,IAAI,oCAED,6BACAf,GADP,IAEIU,mBAAoBV,EAAMU,mBAAqB,KAKpDV,GCfL+L,GAAe,CACjBpK,oBAAoB,EACpB2D,UAAW,GACXE,cAAc,GA+CH6G,GA5CS,WAAmC,IAAlCrM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCAGtD,MbPgC,yBaO7BA,EAAOpL,MAENC,QAAQC,IAAIkL,EAAOxG,aACZ,6BACAzF,GADP,IAEIsF,UAAU,YAAKtF,EAAMsF,UAAUgH,OAAO,CAACL,EAAOxG,kBbXhB,+BaenCwG,EAAOpL,KACC,6BACAb,GADP,IAEIsF,UAAW,KbjBY,wBaqB5B2G,EAAOpL,KACC,6BACAb,GADP,IAEI2B,oBAAoB,IbvBF,mBa2BvBsK,EAAOpL,KACC,6BACAb,GADP,IAEIwF,cAAc,Ib7BW,0BaiC9ByG,EAAOpL,KACC,6BACAb,GADP,IAEIwF,cAAc,IAKfxF,GChDL+L,GAAe,CACjBlK,oBAAoB,EACpBoF,MAAO,CAAC,CAACG,KAAM,OACPQ,YAAa,qGACb,CACIR,KAAM,SACNQ,YAAa,8CAEjB,CACIR,KAAM,QACNQ,YAAa,kGAEjB,CACIR,KAAM,WACNQ,YAAa,wFAEjB,CACIR,KAAM,OACNQ,YAAa,yGAGzB2E,cAAc,EACdtK,UAAW,MA4DAuK,GAzDS,WAAmC,IAAlCxM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCAEtD,GdlB+B,wBckB5BA,EAAOpL,KACN,OAAO,6BACAb,GADP,IAEI6B,oBAAoB,IAI5B,GdxB4B,qBcwBzBoK,EAAOpL,KACN,OAAQoL,EAAO7E,MACX,IAAK,OACD,OAAO,6BACApH,GADP,IAEIiC,UAAW,SAGvB,IAAK,SACG,OAAO,6BACAjC,GADP,IAEIiC,UAAW,WAGnB,IAAK,QACD,OAAO,6BACAjC,GADP,IAEIiC,UAAW,UAGnB,IAAK,OACD,OAAO,6BACAjC,GADP,IAEIiC,UAAW,SAGnB,IAAK,WACD,OAAO,6BACAjC,GADP,IAEIiC,UAAW,aAInB,QACI,OAAO,6BACAjC,GADP,IAEIiC,UAAW,OAS3B,OAAOjC,GC9EL+L,GAAe,CACjBhK,sBAAsB,EACtBuD,UAAW,GACX0C,gBAAgB,GAwCLgE,GArCC,WAAmC,IAAlChM,EAAiC,uDAAzB+L,GAAcE,EAAW,uCAE9C,OAAQA,EAAOpL,MACX,IfK6B,wBeJzB,OAAO,6BACAb,GADP,IAEI+B,sBAAsB,IAE9B,IfF8B,yBeG1B,OAAO,6BACA/B,GADP,IAEIsF,UAAU,YAAKtF,EAAMsF,UAAUgH,OAAO,CAACL,EAAOxG,iBAEtD,IfNoC,+BeOhC,OAAO,6BACAzF,GADP,IAEIsF,UAAW,KAEnB,IfTwB,mBeUpB,OAAO,6BACAtF,GADP,IAEIgI,gBAAgB,IAExB,Ifb+B,0Bec3B,OAAO,6BACAhI,GADP,IAEIgI,gBAAgB,IAQ5B,OAAOhI,GC1BLyM,GAAiBC,aAAaC,QAAQ,cAAgBC,KAAKC,MAAMH,aAAaC,QAAQ,eAAiB,GAEvGG,GAAcC,aAClB,CACE7M,SAAU8M,GACVjD,cAAemC,GACfzL,aAAc2L,GACdxK,SAAUqL,GACVnL,UAAW0K,GACXxK,WAAYkL,KAGVC,GAAQC,aAAYN,GAAaL,IAEvCU,GAAME,WAAU,WACdX,aAAaY,QAAQ,aAAcV,KAAKW,UAAUJ,GAAMK,gBAG1DC,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KAEE,kBAAC,IAAD,CAAeC,SAAUC,qBACvB,kBAAC,IAAD,CAAUT,MAAQA,IAChB,kBAAC,GAAD,SAMNU,SAASC,eAAe,SPxBnB,SAAkB9C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8C,IAAIH,oBAAwBlD,OAAOC,SAASqD,MACpDC,SAAWvD,OAAOC,SAASsD,OAIvC,OAGFvD,OAAOwD,iBAAiB,QAAQ,WAC9B,IAAMnD,EAAK,UAAM6C,oBAAN,sBAEPpD,KAgEV,SAAiCO,EAAOC,GAEtCmD,MAAMpD,EAAO,CACXqD,QAAS,CAAE,iBAAkB,YAE5BhD,MAAK,SAAAiD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxD,UAAUC,cAAcwD,MAAMtD,MAAK,SAAAC,GACjCA,EAAasD,aAAavD,MAAK,WAC7BV,OAAOC,SAASiE,eAKpB9D,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL/K,QAAQC,IACN,oEAvFA8N,CAAwB9D,EAAOC,GAI/BC,UAAUC,cAAcwD,MAAMtD,MAAK,WACjCtK,QAAQC,IACN,iHAMJ+J,GAAgBC,EAAOC,OOE/BE,K","file":"static/js/main.0bd76ae5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorldMap\":\"WorldMap_WorldMap__3K-PS\",\"StageOne\":\"WorldMap_StageOne__2987j\",\"StageTwo\":\"WorldMap_StageTwo__2Mi6l\",\"StageThree\":\"WorldMap_StageThree__1Dqro\",\"StageFour\":\"WorldMap_StageFour__1GHmv\",\"Frog\":\"WorldMap_Frog__3rb46\",\"StageOneWords\":\"WorldMap_StageOneWords__VAAH0\",\"StageTwoWords\":\"WorldMap_StageTwoWords__2BidB\",\"ImpHolder\":\"WorldMap_ImpHolder__Hp4rp\",\"Imp\":\"WorldMap_Imp__2ofeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StageTwoBody\":\"StageTwo_StageTwoBody__1WOn6\",\"ImpHolder\":\"StageTwo_ImpHolder__2lOmG\",\"Imp\":\"StageTwo_Imp__348Gq\",\"Villagers\":\"StageTwo_Villagers__1cAt5\",\"VillagerHolder\":\"StageTwo_VillagerHolder__Za-Nt\",\"Vill\":\"StageTwo_Vill__14xto\",\"Description\":\"StageTwo_Description__2s6ZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__O0q7l\",\"GameBoardLose\":\"GameBoard_GameBoardLose__1OhnP\",\"shake\":\"GameBoard_shake__3yiLG\",\"GameBoardStageTwo\":\"GameBoard_GameBoardStageTwo__2Aokz\",\"GameBoardStageTwoLose\":\"GameBoard_GameBoardStageTwoLose__10wnP\",\"Card\":\"GameBoard_Card__333wC\",\"Image\":\"GameBoard_Image__10me3\"};","module.exports = __webpack_public_path__ + \"static/media/Imp.c33eec6e.png\";","module.exports = __webpack_public_path__ + \"static/media/Crit.8665bc45.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Racoon.3aa7a9b1.png\";","module.exports = __webpack_public_path__ + \"static/media/Squirrel.ad1fc6bf.png\";","module.exports = __webpack_public_path__ + \"static/media/Goose.abc36a7d.png\";","module.exports = __webpack_public_path__ + \"static/media/Dino.4c67f2f7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StageOneBody\":\"StageOne_StageOneBody__27XxJ\",\"FrogHolder\":\"StageOne_FrogHolder__3ylfs\",\"Frog\":\"StageOne_Frog__220bE\",\"SpeechBubble\":\"StageOne_SpeechBubble__goPOU\",\"Victory\":\"StageOne_Victory__18eu1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StageThreeBody\":\"StageThree_StageThreeBody__1nr0-\",\"CandidateHolder\":\"StageThree_CandidateHolder__1iddQ\",\"Candidate\":\"StageThree_Candidate__7UVdC\",\"SpeechBubble\":\"StageThree_SpeechBubble__1Ctzi\",\"Victory\":\"StageThree_Victory__3A2Vo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FirstTime\":\"FirstTime_FirstTime__3J5JD\",\"ImpHolder\":\"FirstTime_ImpHolder__KFj2k\",\"Imp\":\"FirstTime_Imp__3VrQS\",\"WordBox\":\"FirstTime_WordBox__2Sozx\"};","module.exports = __webpack_public_path__ + \"static/media/Frog.ac28868e.png\";","module.exports = __webpack_public_path__ + \"static/media/SpeechBubble.db9985df.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Overlay_Overlay__23OZv\"};","module.exports = __webpack_public_path__ + \"static/media/Draftfish.25e7967e.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishBlue.a82f6201.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishBlack.6417961b.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishDarkGreen.d7260455.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishDarkPurple.4a2a4d86.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishGreen.f6ba1909.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishGrey.8a3b2bce.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishOrange.f9553ff7.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishPurple.49f35f8c.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishRed.a3e53e97.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishTeal.c6b2daac.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishYellow.93ff2533.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoWhite.192b4453.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoDarkBlue.577271a4.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoBlack.c6b5e573.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoDarkGreen.acd10f9a.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoDarkPurple.925c7d10.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoLightGreen.65cce9f0.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoGrey.84281963.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoOrange.18ea59d8.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoLightPurple.e7b619cd.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoRed.d6942d60.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoLightBlue.7f8ccb94.png\";","module.exports = __webpack_public_path__ + \"static/media/ImoYellow.930292ec.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolWhite.89be98c0.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolDarkBlue.1d92b06f.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolBlack.162e6b53.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolDarkGreen.230cbf4f.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolDarkPurple.00c1d663.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolLightGreen.79d0277c.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolGrey.f27db597.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolOrange.cf9516fb.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolLightPurple.a7fc7a72.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolRed.793201c5.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolLightBlue.8b317d91.png\";","module.exports = __webpack_public_path__ + \"static/media/GoolYellow.99a8f2c1.png\";","import classes from './Overlay.module.css';\r\nimport React, {Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Overlay = (props) => {\r\n\r\n    let overlay = null\r\n    if(props.isOverlayOn) {\r\n       overlay = <div className={classes.Overlay}></div>\r\n    }\r\n\r\n\r\n    return  (\r\n        <Fragment>\r\n            {overlay}\r\n        </Fragment>\r\n    )\r\n       \r\n    \r\n        \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Overlay);","import classes from './FirstTime.module.css';\r\nimport React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport ImpImg from '../../reusables/Images/Imp.png'\r\n\r\nconst FirstTime = (props) => {\r\n    let instructionsArray = [\r\n        'Yo, listen up',\r\n        'Here\\'s a story',\r\n        'About a little guy',\r\n        'That lives in a blue world',\r\n        'And all day ',\r\n        'and all night',\r\n        'And everything he sees',\r\n        'is just blue',\r\n        'like him ',\r\n        'inside and outside',\r\n        'Blue his house',\r\n        'With a blue little window',\r\n        'And a blue corvette',\r\n        'And everything is blue',\r\n        'for him',\r\n        'And himself ',\r\n        'and everybody around',\r\n        'Cause he ain\\'t got',\r\n        'nobody',\r\n        'to listen to',\r\n        'to listen to',\r\n        'IM BLUE',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n    ]\r\n\r\n\r\n    if(props.instructionsNum === 0) {\r\n        console.log(\"Test is running\")\r\n        let loopInstructions = setInterval( () => { props.incrementInstructionNumber() },1350)\r\n\r\n        setTimeout(()=> {\r\n            clearInterval(loopInstructions)\r\n        }, 35000)        \r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.FirstTime}>\r\n                <div className={classes.WordBox}>\r\n                <p>{instructionsArray[props.instructionsNum]}</p>\r\n                </div>\r\n                <div className={classes.ImpHolder}>\r\n                    <img className={classes.Imp} src={ImpImg} alt=\"Imp\"></img>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        incrementInstructionNumber: () => dispatch({type: actionTypes.INCR_INSTRUCTIONS_NUMBER})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        instructionsNum: state.nstrctnsrdcr.instructionsNumber\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FirstTime);","export const TURN_OFF_OVERLAY = 'TURN_OFF_OVERLAY';\r\nexport const TURN_ON_OVERLAY = 'TURN_ON_OVERLAY';\r\nexport const TURN_OFF_FIRST_VISIT = \"TURN_OFF_FIRST_VISIT\";\r\nexport const INCR_INSTRUCTIONS_NUMBER = 'INCR_INSTRUCTIONS_NUMBER';\r\n//STAGE ONE\r\nexport const STAGE_ONE_CLICKED_ON = \"STAGE_ONE_CLICKED_ON\";\r\nexport const STAGE_ONE_CLEAR_CLICKED_ON = \"STAGE_ONE_CLEAR_CLICKED_ON\";\r\nexport const STAGE_ONE_COMPLETED = \"STAGE_ONE_COMPLETED\";\r\nexport const STAGE_ONE_LOST = 'STAGE_ONE_LOST';\r\nexport const STAGE_ONE_REVERT_LOST = \"STAGE_ONE_REVERT_LOST\";\r\n//Stage Two\r\nexport const STAGE_TWO_COMPLETED = \"STAGE_TWO_COMPLETED\";\r\nexport const BECOME_CANDIDATE = \"BECOME_CANDIDATE\";\r\nexport const KILL_CANDIDATE = \"KILL_CANDIDATE\";\r\n//Stage Three\r\nexport const STAGE_THREE_CLICKED_ON = \"STAGE_THREE_CLICKED_ON\";\r\nexport const STAGE_THREE_CLEAR_CLICKED_ON = \"STAGE_THREE_CLEAR_CLICKED_ON\";\r\nexport const STAGE_THREE_COMPLETED = \"STAGE_THREE_COMPLETED\";\r\nexport const STAGE_THREE_LOST = 'STAGE_THREE_LOST';\r\nexport const STAGE_THREE_REVERT_LOST = \"STAGE_THREE_REVERT_LOST\";","import classes from './WorldMap.module.css';\r\nimport React, { Fragment} from 'react';\r\nimport {  Link } from 'react-router-dom';\r\nimport frog from '../../reusables/Images/StageOne/Frog.png';\r\nimport Imp from '../../reusables/Images/Imp.png';\r\nimport Crit from '../../reusables/Images/StageTwo/Crit.PNG'\r\nimport Racoon from '../../reusables/Images/StageTwo/Racoon.png'\r\nimport Squirrel from '../../reusables/Images/StageTwo/Squirrel.png'\r\nimport Goose from '../../reusables/Images/StageTwo/Goose.png'\r\nimport Dino from '../../reusables/Images/StageTwo/Dino.png'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst WorldMap = (props) => {\r\n\r\n\r\n\r\n    let stageOneWords = props.isStageOneComplete ? <div className={classes.StageOneWords}>\r\n                            <p>Well done!</p>\r\n                            <p>Enough fish have been collected.</p>\r\n                        </div> :\r\n                        <div className={classes.StageOneWords}>\r\n                            <p>New Stage!</p>\r\n                            <p>Help the frog collect fish for the village.</p>\r\n                         </div>\r\n\r\n    let stageOne = <div className={classes.StageOne}>\r\n                        <div className={classes.Frog}>\r\n                            <img src={frog} alt='frog'></img>\r\n                        </div>\r\n                        {stageOneWords}\r\n                    </div>\r\n\r\n    let stageTwoWords = props.isStageTwoComplete ? <div className={classes.StageTwoWords}>\r\n                            <p>Enter the village.</p>\r\n                            <p>Choose someone to lead the battle.</p>\r\n                        </div> :\r\n                        <div className={classes.StageTwoWords}>\r\n                            <p>New Stage!</p>\r\n                            <p>Enter the village and meet your new friends!</p>\r\n                         </div>\r\n\r\n    let stageTwo = <div className={classes.StageTwo}>\r\n                        <div className={classes.ImpHolder}>\r\n                            <img className={classes.Imp} src={Imp} alt='Imp'></img>\r\n                        </div>\r\n                        {stageTwoWords}\r\n                    </div>\r\n\r\n        stageTwo = props.isStageOneComplete ? < Link to=\"/StageTwo\" style={{textDecoration: 'none'}} >{stageTwo}</Link> : <div className={classes.StageTwo}></div>\r\n\r\n\r\n        let sourceCandidate = null\r\n\r\n        switch (props.candidate) {\r\n            case 'Crit':\r\n                sourceCandidate = Crit\r\n                break;\r\n            case 'Racoon':\r\n                sourceCandidate = Racoon\r\n                break;\r\n            case 'Squirrel':\r\n                sourceCandidate = Squirrel\r\n                break;\r\n            case 'Goose':\r\n                sourceCandidate = Goose\r\n                break;\r\n            case 'Dino':\r\n                sourceCandidate = Dino\r\n                break;\r\n        \r\n            default:\r\n                sourceCandidate = null\r\n                break;\r\n        }\r\n         let stageThreeWords = props.isStageThreeComplete ? <div className={classes.StageTwoWords}>\r\n                            <p>The village is saved!</p>\r\n                            <p>It is time to go on the offensive!</p>\r\n                        </div> :\r\n                        <div className={classes.StageTwoWords}>\r\n                            <p>The village is under attack!</p>\r\n                            <p>The battle must not last longer than 3 minutes!</p>\r\n                         </div>\r\n\r\n        let stageThree =    <div className={classes.StageThree}>\r\n                        <div className={classes.FrogHolder}>\r\n                            <img className={classes.Frog} src={sourceCandidate} alt='Imp'></img>\r\n                        </div>\r\n                                {stageThreeWords}\r\n                            </div>\r\n\r\n        stageThree = props.isStageTwoComplete ? < Link to=\"/StageThree\" style={{textDecoration: 'none'}}>{stageThree} </Link> : <div className={classes.StageThree}></div>\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.WorldMap}>\r\n                < Link to=\"/StageOne\" style={{textDecoration: 'none'}} >{stageOne}</Link>\r\n\r\n                {stageTwo}\r\n                {stageThree}\r\n\r\n                < Link to=\"/StageFour\" style={{textDecoration: 'none'}}>\r\n                    <div className={classes.StageFour}><p>stuff</p>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isStageOneComplete: state.stgnrdcr.isStageOneComplete,\r\n        isStageTwoComplete: state.stgtwrdcr.isStageTwoComplete,\r\n        isStageThreeComplete: state.stgthrrdcr.isStageThreeComplete,\r\n        candidate: state.stgtwrdcr.candidate\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WorldMap);","import classes from './GameBoard.module.css';\r\nimport React from 'react';\r\n\r\nconst GameBoard = (props) => {\r\n\r\n    let cardsArray = [...props.cards];\r\n\r\n    let gameboardClass = props.stage === '2' ? props.Lost ? classes.GameBoardStageTwoLose : classes.GameBoardStageTwo : props.Lost ? classes.GameBoardLose : classes.GameBoard\r\n\r\n    return (\r\n        <div className={gameboardClass}>\r\n            {cardsArray.map((ele) =>{\r\n                return (<div \r\n                            className={classes.Card}\r\n                            key={ele} \r\n                            onClick={() => {\r\n                            props.clicked(ele)\r\n                        }}>\r\n                            <img alt='fish' className={classes.Image} src={ele}></img>\r\n                        </div>  \r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GameBoard;","const shuffle = (flashcards) => {\r\n    let currentIndex = flashcards.length\r\n    let temporaryValue = Number;\r\n    let randomIndex = Number;\r\n\r\n    while(currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random()*currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = flashcards[currentIndex]\r\n        flashcards[currentIndex] = flashcards[randomIndex]\r\n        flashcards[randomIndex] = temporaryValue\r\n    }\r\n\r\n    return flashcards\r\n}\r\n\r\nexport default shuffle","import classes from './StageOne.module.css';\r\nimport React from 'react';\r\nimport GameBoard from '../../../reusables/gameBoard/GameBoard';\r\nimport shuffle from '../../../reusables/Shuffle/shuffle';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../../store/actionTypes/actionTypes';\r\n\r\nimport draftfish from '../../../reusables/Images/StageOne/Draftfish.png';\r\nimport draftfishBlue from '../../../reusables/Images/StageOne/DraftfishBlue.png';\r\nimport draftfishBlack from '../../../reusables/Images/StageOne/DraftfishBlack.png';\r\nimport draftfishDarkGreen from '../../../reusables/Images/StageOne/DraftfishDarkGreen.png';\r\nimport draftfishDarkPurple from '../../../reusables/Images/StageOne/DraftfishDarkPurple.png';\r\nimport draftfishGreen from '../../../reusables/Images/StageOne/DraftfishGreen.png';\r\nimport draftfishGrey from '../../../reusables/Images/StageOne/DraftfishGrey.png';\r\nimport draftfishOrange from '../../../reusables/Images/StageOne/DraftfishOrange.png';\r\nimport draftfishPurple from '../../../reusables/Images/StageOne/DraftfishPurple.png';\r\nimport draftfishRed from '../../../reusables/Images/StageOne/DraftfishRed.png';\r\nimport draftfishTeal from '../../../reusables/Images/StageOne/DraftfishTeal.png';\r\nimport draftfishYellow from '../../../reusables/Images/StageOne/DraftfishYellow.png';\r\nimport frog from '../../../reusables/Images/StageOne/Frog.png';\r\nimport speechBubble from '../../../reusables/Images/SpeechBubble.png';\r\nimport { Link } from 'react-router-dom';\r\n \r\n\r\nconst StageOne = (props) => {\r\n\r\n\r\n    let cardsArray = [draftfish, draftfishBlack, draftfishBlue, draftfishDarkGreen, draftfishDarkPurple, draftfishGreen, draftfishGrey,\r\n                        draftfishOrange, draftfishPurple, draftfishRed, draftfishTeal, draftfishYellow\r\n    ]\r\n    \r\n    cardsArray = shuffle(cardsArray)\r\n    \r\n    let frogPhrase = props.isStageOneComplete ? 'Thank you!' : 'Help me catch each fish!'\r\n    let stageOneLost = props.isStageOneLost ? true : false\r\n    \r\n    const lose = () => {\r\n        props.clearClickedOn();\r\n        props.stageOneLost();\r\n        setTimeout(props.stageOneLostRevert, 1500)\r\n    }\r\n\r\n    const winCondition = () => {\r\n        props.clearClickedOn();\r\n        props.stageOneComplete();\r\n        \r\n    }\r\n\r\n    let addCardToState = (ele) => {\r\n        props.clickedOnArray.every((e) => e !== ele) ? props.clickedOnArray.length === cardsArray.length-1 ? winCondition() : props.clickedOn(ele) : lose();\r\n\r\n    }\r\n\r\n    let gameboard = <GameBoard cards={cardsArray} clicked={addCardToState} Lost={stageOneLost} stage='1' />;\r\n\r\n    if(props.isStageOneComplete){\r\n        gameboard = <div className={classes.Victory}>Well done! <br /> The village will not starve!</div>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.StageOneBody}>\r\n            <div>\r\n                <div className={classes.FrogHolder}>\r\n                    <Link to='/'>\r\n                        <img className={classes.Frog} src={frog} alt='frog'></img>\r\n                    </Link>\r\n                </div>\r\n                <div className={classes.SpeechBubble}><img src={ speechBubble} alt='speechbub'></img><p>{frogPhrase}<br></br>Click me to go home.</p></div>\r\n            </div>\r\n            {gameboard}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isStageOneComplete: state.stgnrdcr.isStageOneComplete,\r\n        clickedOnArray: state.stgnrdcr.clickedOn,\r\n        isStageOneLost: state.stgnrdcr.stageOneLost\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        clickedOn: (ele) => dispatch({type: actionTypes.STAGE_ONE_CLICKED_ON, clickedCard: ele}),\r\n        clearClickedOn: () => dispatch({type: actionTypes.STAGE_ONE_CLEAR_CLICKED_ON}),\r\n        stageOneComplete: () => dispatch({type: actionTypes.STAGE_ONE_COMPLETED}),\r\n        stageOneLost: () => dispatch({type: actionTypes.STAGE_ONE_LOST}),\r\n        stageOneLostRevert: () => dispatch({type: actionTypes.STAGE_ONE_REVERT_LOST})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StageOne);","import React from 'react';\r\nimport classes from './StageTwo.module.css';\r\nimport { connect } from 'react-redux';\r\nimport Crit from '../../../reusables/Images/StageTwo/Crit.PNG'\r\nimport Racoon from '../../../reusables/Images/StageTwo/Racoon.png'\r\nimport Squirrel from '../../../reusables/Images/StageTwo/Squirrel.png'\r\nimport Goose from '../../../reusables/Images/StageTwo/Goose.png'\r\nimport Dino from '../../../reusables/Images/StageTwo/Dino.png'\r\nimport Imp from '../../../reusables/Images/Imp.png'\r\nimport { Link } from 'react-router-dom';\r\nimport * as actionTypes from '../../../../store/actionTypes/actionTypes';\r\n\r\n\r\nconst StageTwo = (props) => {\r\n\r\n    \r\n    console.log('vilager array:   ' + props.vills)\r\n\r\n    let vills = [...props.vills];\r\n\r\n    let showVills = vills.map((element) => {\r\n\r\n        let sourceVill = null;\r\n\r\n        switch (element.name) {\r\n            case 'Crit':\r\n                sourceVill = Crit\r\n                break;\r\n            case 'Racoon':\r\n                sourceVill = Racoon\r\n                break;\r\n            case 'Squirrel':\r\n                sourceVill = Squirrel\r\n                break;\r\n            case 'Goose':\r\n                sourceVill = Goose\r\n                break;\r\n            case 'Dino':\r\n                sourceVill = Dino\r\n                break;\r\n        \r\n            default:\r\n                sourceVill = null\r\n                break;\r\n        }\r\n\r\n        let border = props.candidate === element.name ?  '2px solid green' :  null\r\n        return (\r\n            <div className={classes.VillagerHolder}>\r\n                <img className={classes.Vill} src={sourceVill} alt={element.name} onClick={() => {props.becomeCandidate(element.name)}}  style={{\r\n                    border: border\r\n                }} />\r\n                <p className={classes.Description}>{element.description}</p>\r\n            </div>\r\n        )\r\n    })\r\n    \r\n\r\n    return (\r\n        <div className={classes.StageTwoBody}>\r\n            \r\n            <div className={classes.ImpHolder}>\r\n            <Link to='/'><img className={classes.Imp} src={Imp} onClick={props.stageTwoCompleted} alt=\"Imp\"></img></Link>\r\n                <p>{props.isStageTwoComplete ? 'Choose someone to lead the defense!' : 'These are my friends. Say hello!'}</p>\r\n            </div>\r\n            <div className={classes.Villagers}>\r\n                {showVills}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        vills: state.stgtwrdcr.vills,\r\n        isStageTwoComplete: state.stgtwrdcr.isStageTwoComplete,\r\n        candidate: state.stgtwrdcr.candidate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        stageTwoCompleted: () => dispatch({type: actionTypes.STAGE_TWO_COMPLETED}),\r\n        becomeCandidate: (name) => dispatch({type: actionTypes.BECOME_CANDIDATE, name: name}) \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StageTwo)","import React from 'react';\r\nimport classes from './StageThree.module.css';\r\nimport * as actionTypes from '../../../../store/actionTypes/actionTypes';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Crit from '../../../reusables/Images/StageTwo/Crit.PNG'\r\nimport Racoon from '../../../reusables/Images/StageTwo/Racoon.png'\r\nimport Squirrel from '../../../reusables/Images/StageTwo/Squirrel.png'\r\nimport Goose from '../../../reusables/Images/StageTwo/Goose.png'\r\nimport Dino from '../../../reusables/Images/StageTwo/Dino.png'\r\nimport speechBubble from '../../../reusables/Images/SpeechBubble.png'\r\nimport Gameboard from '../../../reusables/gameBoard/GameBoard';\r\nimport shuffle from '../../../reusables/Shuffle/shuffle';\r\n\r\n//IMOS\r\nimport ImoWhite from '../../../reusables/Images/StageThree/ImoWhite.png';\r\nimport ImoDarkBlue from '../../../reusables/Images/StageThree/ImoDarkBlue.png';\r\nimport ImoBlack from '../../../reusables/Images/StageThree/ImoBlack.png';\r\nimport ImoDarkGreen from '../../../reusables/Images/StageThree/ImoDarkGreen.png';\r\nimport ImoDarkPurple from '../../../reusables/Images/StageThree/ImoDarkPurple.png';\r\nimport ImoLightGreen from '../../../reusables/Images/StageThree/ImoLightGreen.png';\r\nimport ImoGrey from '../../../reusables/Images/StageThree/ImoGrey.png';\r\nimport ImoOrange from '../../../reusables/Images/StageThree/ImoOrange.png';\r\nimport ImoLightPurple from '../../../reusables/Images/StageThree/ImoLightPurple.png';\r\nimport ImoRed from '../../../reusables/Images/StageThree/ImoRed.png';\r\nimport ImoLightBlue from '../../../reusables/Images/StageThree/ImoLightBlue.png';\r\nimport ImoYellow from '../../../reusables/Images/StageThree/ImoYellow.png';\r\n//GOOLS\r\nimport GoolWhite from '../../../reusables/Images/StageThree/GoolWhite.png';\r\nimport GoolDarkBlue from '../../../reusables/Images/StageThree/GoolDarkBlue.png';\r\nimport GoolBlack from '../../../reusables/Images/StageThree/GoolBlack.png';\r\nimport GoolDarkGreen from '../../../reusables/Images/StageThree/GoolDarkGreen.png';\r\nimport GoolDarkPurple from '../../../reusables/Images/StageThree/GoolDarkPurple.png';\r\nimport GoolLightGreen from '../../../reusables/Images/StageThree/GoolLightGreen.png';\r\nimport GoolGrey from '../../../reusables/Images/StageThree/GoolGrey.png';\r\nimport GoolOrange from '../../../reusables/Images/StageThree/GoolOrange.png';\r\nimport GoolLightPurple from '../../../reusables/Images/StageThree/GoolLightPurple.png';\r\nimport GoolRed from '../../../reusables/Images/StageThree/GoolRed.png';\r\nimport GoolLightBlue from '../../../reusables/Images/StageThree/GoolLightBlue.png';\r\nimport GoolYellow from '../../../reusables/Images/StageThree/GoolYellow.png';\r\n\r\n\r\nconst StageThree = (props) => {\r\n\r\n    let cardsArray = [GoolWhite, GoolBlack, GoolDarkBlue, GoolDarkGreen, GoolDarkPurple, GoolLightGreen, GoolGrey,\r\n        GoolOrange, GoolLightPurple, GoolRed, GoolLightBlue, GoolYellow, ImoWhite, ImoBlack, ImoDarkBlue, ImoDarkGreen, ImoDarkPurple, ImoLightGreen, ImoGrey,\r\n        ImoOrange, ImoLightPurple, ImoRed, ImoLightBlue, ImoYellow\r\n    ]\r\n\r\n    cardsArray = shuffle(cardsArray)\r\n\r\n    const lose = () => {\r\n        props.clearClickedOn();\r\n        props.stageThreeLost();\r\n        setTimeout(() =>{\r\n            props.stageThreeLostRevert();\r\n            \r\n        }, 1500)\r\n    }\r\n\r\n    const winCondition = () => {\r\n        props.clearClickedOn();\r\n        props.stageThreeComplete();\r\n        \r\n    }\r\n\r\n    let addCardToState = (ele) => {\r\n        props.clickedOnArray.every((e) => e !== ele) ? props.clickedOnArray.length === cardsArray.length-1 ? winCondition() : props.clickedOn(ele) : lose();\r\n\r\n    }\r\n    let stageThreeLost = props.isStageThreeLost ? true : false\r\n\r\n    console.log('[StageThree COMponent] is stage 3 lost:    ' + stageThreeLost)\r\n    let gameboard = <Gameboard cards={cardsArray} Lost={stageThreeLost} stage='2' clicked={addCardToState} />\r\n    if(props.isStageThreeComplete) {\r\n        gameboard = <div className={classes.Victory}>Well done! <br /> The oracle has been defeated!</div>\r\n    }\r\n\r\n\r\n    let sourceCandidate = null;\r\n    let attackPhrase = null\r\n\r\n        switch (props.candidate) {\r\n            case 'Crit':\r\n                sourceCandidate = Crit\r\n                attackPhrase = ' Finish this quick. I have a stick to attend to. '\r\n                break;\r\n            case 'Racoon':\r\n                sourceCandidate = Racoon\r\n                attackPhrase = 'Let\\'s get\\'em! '\r\n                break;\r\n            case 'Squirrel':\r\n                sourceCandidate = Squirrel\r\n                attackPhrase = 'I don\\'t think they want to play with us. '\r\n                break;\r\n            case 'Goose':\r\n                sourceCandidate = Goose\r\n                attackPhrase = 'Just imminent danger, in the middle of it me!'\r\n                break;\r\n            case 'Dino':\r\n                sourceCandidate = Dino\r\n                attackPhrase = '  Maybe they know where Sunset is...'\r\n                break;\r\n        \r\n            default:\r\n                sourceCandidate = null\r\n                attackPhrase = null\r\n                break;\r\n        }\r\n    return (\r\n        <div className={classes.StageThreeBody}>\r\n        <div>\r\n            <div className={classes.CandidateHolder}>\r\n                <Link to='/'>\r\n                    <img className={classes.CandidateHolder} src={sourceCandidate} alt='candidate'></img>\r\n                </Link>\r\n            </div>\r\n            <div className={classes.SpeechBubble}><img src={ speechBubble} alt='speechbub'></img><p>{attackPhrase}</p></div>\r\n        </div>\r\n        {gameboard}\r\n    </div>)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isStageThreeComplete: state.stgthrrdcr.isStageThreeComplete,\r\n        candidate: state.stgtwrdcr.candidate,\r\n        isStageThreeLost: state.stgthrrdcr.stageThreeLost,\r\n        clickedOnArray: state.stgthrrdcr.clickedOn\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        clickedOn: (ele) => dispatch({type: actionTypes.STAGE_THREE_CLICKED_ON, clickedCard: ele}),\r\n        clearClickedOn: () => dispatch({type: actionTypes.STAGE_THREE_CLEAR_CLICKED_ON}),\r\n        stageThreeComplete: () => dispatch({type: actionTypes.STAGE_THREE_COMPLETED}),\r\n        stageThreeLost: () => dispatch({type: actionTypes.STAGE_THREE_LOST}),\r\n        stageThreeLostRevert: () => dispatch({type: actionTypes.STAGE_THREE_REVERT_LOST})\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StageThree)\r\n","import React, { Fragment } from 'react';\r\nimport Overlay from './reusables/Overlay/Overlay';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/actionTypes/actionTypes';\r\nimport FirstTime from './components/FirstTimeCompenent/FirstTime';\r\nimport WorldMap from './components/WorldMapComponent/WorldMap';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport StageOne from './components/Stages/StageOneComponent/StageOne';\r\nimport StageTwo from './components/Stages/StageTwoComponent/StageTwo';\r\nimport StageThree from './components/Stages/StageThreeComponent/StageThree';\r\n \r\nconst MemoryCardGame = (props) => {\r\n\r\n    let overlay = null\r\n    let firstTime = null\r\n    let worldMap = <WorldMap />\r\n    \r\n    if(props.isUserFirstVisit){\r\n        overlay = <Overlay />\r\n        firstTime = <FirstTime />\r\n        worldMap = null\r\n        setTimeout(() => {\r\n            props.turnOffOverlay();\r\n            props.turnOffFirstVisit();\r\n        }, 30000);\r\n    }\r\n\r\n    return ( \r\n    <Fragment>\r\n        <HashRouter>\r\n            <Route path='/' exact render={() => {\r\n                return (<div>\r\n                    {overlay}\r\n                    {firstTime}\r\n                    {worldMap}\r\n                </div>)\r\n            } } />\r\n\r\n            <Route path='/StageOne' exact render={ () => <StageOne />} />\r\n            <Route path='/StageTwo' exact render={ () => <StageTwo />} />\r\n            <Route path='/StageThree' exact render={ () => <StageThree />} />\r\n            <Route path='/StageFour' exact render={ () => <p>Stage4</p>} />\r\n        </HashRouter>\r\n    </Fragment> \r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        turnOffOverlay: () => dispatch({type: actionTypes.TURN_OFF_OVERLAY}),\r\n        turnOffFirstVisit: () => dispatch({type: actionTypes.TURN_OFF_FIRST_VISIT})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn,\r\n        isUserFirstVisit: state.frsttmvstrdcr.isUserFirstVisit\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoryCardGame);","import React from 'react';\nimport './App.css';\nimport MemoryCardGame from './MemoryCardGame/MemoryCardGame';\n\nfunction App() {\n  return (\n    <MemoryCardGame />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isOverlayOn: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case actionTypes.TURN_ON_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: true\r\n            }\r\n        case actionTypes.TURN_OFF_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: false\r\n            }\r\n        default :\r\n             return state\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isUserFirstVisit: true\r\n};\r\n\r\nconst firstVisitReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.TURN_OFF_FIRST_VISIT) {\r\n        return {\r\n            ...state,\r\n            isUserFirstVisit: false\r\n        }\r\n    }\r\n    return state\r\n};\r\n\r\nexport default firstVisitReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    timerIsRunning: true,\r\n    instructionsNumber: 0\r\n};\r\n\r\nconst instructionsReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.INCR_INSTRUCTIONS_NUMBER) {\r\n        console.log('REDCUER Instruction number Begin')\r\n        \r\n            return {\r\n                ...state,\r\n                instructionsNumber: state.instructionsNumber + 1\r\n            }\r\n            \r\n\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nexport default instructionsReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n    isStageOneComplete: false,\r\n    clickedOn: [],\r\n    stageOneLost: false\r\n};\r\n\r\nconst stageOnereducer = (state = initialState, action) => {\r\n\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_CLICKED_ON){\r\n\r\n        console.log(action.clickedCard)\r\n        return {\r\n            ...state,\r\n            clickedOn: [...state.clickedOn.concat([action.clickedCard])]\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_CLEAR_CLICKED_ON){\r\n        return {\r\n            ...state,\r\n            clickedOn: []\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_COMPLETED){\r\n        return {\r\n            ...state,\r\n            isStageOneComplete: true\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_LOST){\r\n        return {\r\n            ...state,\r\n            stageOneLost: true\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_REVERT_LOST){\r\n        return {\r\n            ...state,\r\n            stageOneLost: false\r\n        }\r\n    }\r\n\r\n\r\n    return state\r\n};\r\n\r\nexport default stageOnereducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isStageTwoComplete: false,\r\n    vills: [{name: 'Crit',\r\n            description: 'Hi, I\\'m Crit. I manage the forest area, but most of the time I like to just play with this stick.'},\r\n            {\r\n                name: 'Racoon',\r\n                description: 'I\\'m Randolf. But you can just call me Rac.' \r\n            },\r\n            {\r\n                name: 'Goose',\r\n                description: 'The name\\'s Captain Goose. Stand back everyone! A goose\\'s gotta do what a goose has gotta do!  '\r\n            },\r\n            {\r\n                name: 'Squirrel',\r\n                description: 'Hi, my names Acorn. Let\\'s play some music together sometime? Just kidding...Unless? '\r\n            },\r\n            {\r\n                name: 'Dino',\r\n                description: 'I\\'m Twi, the twilight dinosaur. My brother the sunset dinosaur is missing. Can you help me find him?'\r\n            }\r\n            ],\r\n    stageTwoLost: false,\r\n    candidate: null\r\n};\r\n\r\nconst stageTwoReducer = (state = initialState, action) => {\r\n\r\n    if(action.type === actionTypes.STAGE_TWO_COMPLETED) {\r\n        return {\r\n            ...state,\r\n            isStageTwoComplete: true\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.BECOME_CANDIDATE) {\r\n        switch (action.name) {\r\n            case 'Crit' :\r\n                return {\r\n                    ...state,\r\n                    candidate: 'Crit'\r\n                }\r\n            \r\n        case 'Racoon' :\r\n                return {\r\n                    ...state,\r\n                    candidate: 'Racoon'\r\n                }\r\n            \r\n            case 'Goose' :\r\n                return {\r\n                    ...state,\r\n                    candidate: 'Goose'\r\n                }\r\n            \r\n            case 'Dino' :\r\n                return {\r\n                    ...state,\r\n                    candidate: 'Dino'\r\n                }\r\n            \r\n            case 'Squirrel' :\r\n                return {\r\n                    ...state,\r\n                    candidate: 'Squirrel'\r\n                }\r\n            \r\n    \r\n            default:\r\n                return {\r\n                    ...state,\r\n                    candidate: null\r\n                }\r\n    }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    return state\r\n};\r\n\r\nexport default stageTwoReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n    isStageThreeComplete: false,\r\n    clickedOn: [],\r\n    stageThreeLost: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionTypes.STAGE_THREE_COMPLETED :\r\n            return {\r\n                ...state,\r\n                isStageThreeComplete: true\r\n            }\r\n        case actionTypes.STAGE_THREE_CLICKED_ON :\r\n            return {\r\n                ...state,\r\n                clickedOn: [...state.clickedOn.concat([action.clickedCard])]\r\n            }\r\n        case actionTypes.STAGE_THREE_CLEAR_CLICKED_ON :\r\n            return {\r\n                ...state,\r\n                clickedOn: []\r\n            }\r\n        case actionTypes.STAGE_THREE_LOST :\r\n            return {\r\n                ...state,\r\n                stageThreeLost: true\r\n            }\r\n        case actionTypes.STAGE_THREE_REVERT_LOST :\r\n            return {\r\n                ...state,\r\n                stageThreeLost: false\r\n            }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n\r\n\r\n    return state\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport overlayReducer from './store/reducers/overlayReducer';\nimport firstVisitReducer from './store/reducers/firstVisitReducer';\nimport instructionsReducer from './store/reducers/instructionsReducer';\nimport stageOneReducer from './store/reducers/stageOneReducer'\nimport stageTwoReducer from './store/reducers/stageTwoReducer';\nimport stageThreeReducer from './store/reducers/stageThreeReducer';\n\n\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n\nconst rootReducer = combineReducers(\n  {\n    vrlyrdcr: overlayReducer,\n    frsttmvstrdcr: firstVisitReducer,\n    nstrctnsrdcr: instructionsReducer,\n    stgnrdcr: stageOneReducer,\n    stgtwrdcr: stageTwoReducer,\n    stgthrrdcr: stageThreeReducer\n  }\n)\nconst store = createStore(rootReducer, persistedState)\n\nstore.subscribe(()=>{\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={ store }>\n        <App />\n      </Provider>\n    </BrowserRouter>\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}