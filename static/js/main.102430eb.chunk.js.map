{"version":3,"sources":["MemoryCardGame/reusables/Overlay/Overlay.module.css","MemoryCardGame/reusables/Images/Imp.png","MemoryCardGame/reusables/Overlay/Overlay.js","MemoryCardGame/components/FirstTimeCompenent/FirstTime.js","store/actionTypes/actionTypes.js","MemoryCardGame/MemoryCardGame.js","App.js","serviceWorker.js","store/reducers/overlayReducer.js","store/reducers/firstVisitReducer.js","store/reducers/instructionsReducer.js","index.js","MemoryCardGame/components/FirstTimeCompenent/FirstTime.module.css"],"names":["module","exports","connect","state","isOverlayOn","vrlyrdcr","props","overlay","className","classes","Overlay","instructionsNum","nstrctnsrdcr","instructionsNumber","dispatch","incrementInstructionNumber","type","console","log","FirstTime","WordBox","ImpHolder","Imp","src","ImpImg","alt","isUserFirstVisit","frsttmvstrdcr","turnOffOverlay","turnOffFirstVisit","firstTime","setTimeout","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","reducer","action","firstVisitReducer","instructionsReducer","timer","setInterval","persistedState","localStorage","getItem","JSON","parse","rootReducer","combineReducers","overlayReducer","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.102430eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Overlay_Overlay__23OZv\"};","module.exports = __webpack_public_path__ + \"static/media/Imp.c33eec6e.png\";","import classes from './Overlay.module.css';\r\nimport React, {Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Overlay = (props) => {\r\n\r\n    let overlay = null\r\n    if(props.isOverlayOn) {\r\n       overlay = <div className={classes.Overlay}></div>\r\n    }\r\n\r\n\r\n    return  (\r\n        <Fragment>\r\n            {overlay}\r\n        </Fragment>\r\n    )\r\n       \r\n    \r\n        \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Overlay);","import classes from './FirstTime.module.css';\r\nimport React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport ImpImg from '../../reusables/Images/Imp.png'\r\n\r\nconst FirstTime = (props) => {\r\n    let instructionsArray = [\r\n        'Hello',\r\n        'Welcome to Stonehorn',\r\n        'Some BS story telling how to play the game'\r\n    ]\r\n\r\n    // const [instructionsNum, setInstructionsNum] = useState({\r\n    //     instructionsNum: 0\r\n    // }) \r\n\r\n\r\n    \r\n    // const timer = () => {\r\n    //         if(instructionsNum.instructionsNum >= instructionsArray.length){\r\n                \r\n    //             setInstructionsNum({\r\n    //                 instructionsNum: 0\r\n    //             })\r\n    //             stopInstructions();\r\n    //         } else {\r\n    //         setInstructionsNum({\r\n    //             instructionsNum: instructionsNum.instructionsNum + 1\r\n    //         })\r\n    //         }\r\n    // }\r\n\r\n    // const loopInstructions = setInterval(timer, 1500)\r\n\r\n    // const stopInstructions = () => {\r\n    //     clearInterval(loopInstructions)\r\n    // }\r\n\r\n\r\n    // const timer = () => {\r\n    //     if(props.instructionsNum >= instructionsArray.length) {\r\n            \r\n    //     } else {\r\n    //         props.incrementInstructionNumber();\r\n            \r\n    //     }\r\n    // }\r\n    \r\n    // setInterval(timer, 1500)\r\n    if(props.instructionsNum === 0) {\r\n        props.incrementInstructionNumber();\r\n    }\r\n\r\n    console.log(props.instructionsNum)\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.FirstTime}>\r\n                <div className={classes.WordBox}>\r\n                <p>{instructionsArray[props.instructionsNum]}</p>\r\n                </div>\r\n                <div className={classes.ImpHolder}>\r\n                    <img className={classes.Imp} src={ImpImg} alt=\"Imp\"></img>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        incrementInstructionNumber: () => dispatch({type: actionTypes.INCR_INSTRUCTIONS_NUMBER})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        instructionsNum: state.nstrctnsrdcr.instructionsNumber\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FirstTime);","export const TURN_OFF_OVERLAY = 'TURN_OFF_OVERLAY';\r\nexport const TURN_ON_OVERLAY = 'TURN_ON_OVERLAY';\r\nexport const TURN_OFF_FIRST_VISIT = \"TURN_OFF_FIRST_VISIT\";\r\nexport const INCR_INSTRUCTIONS_NUMBER = 'INCR_INSTRUCTIONS_NUMBER';\r\n","import React, { Fragment } from 'react';\r\nimport Overlay from './reusables/Overlay/Overlay';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/actionTypes/actionTypes';\r\nimport FirstTime from './components/FirstTimeCompenent/FirstTime';\r\n \r\nconst MemoryCardGame = (props) => {\r\n\r\n    let overlay = null\r\n    let firstTime = null\r\n    \r\n    if(props.isUserFirstVisit){\r\n        overlay = <Overlay />\r\n        firstTime = <FirstTime />\r\n        setTimeout(() => {\r\n            props.turnOffOverlay();\r\n            props.turnOffFirstVisit();\r\n        }, 300000);\r\n    }\r\n\r\n    return ( \r\n    <Fragment>\r\n        {overlay}\r\n        {firstTime}\r\n        <div>\r\n            <p>a world map in the background</p>\r\n            <p>Components that need to be added</p>\r\n            <p>a component for each \"level\"</p>\r\n            <p>I have 0 direction of where this project is headed</p>\r\n            <p>Addd changing text to speech in steead of making font smaller</p>\r\n            <p>list characters</p>\r\n            <p>FIGURE OUT HOW TO FIX TIMER IN STATE</p>\r\n        </div>\r\n    </Fragment> \r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        turnOffOverlay: () => dispatch({type: actionTypes.TURN_OFF_OVERLAY}),\r\n        turnOffFirstVisit: () => dispatch({type: actionTypes.TURN_OFF_FIRST_VISIT})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn,\r\n        isUserFirstVisit: state.frsttmvstrdcr.isUserFirstVisit\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoryCardGame);","import React from 'react';\nimport './App.css';\nimport MemoryCardGame from './MemoryCardGame/MemoryCardGame';\n\nfunction App() {\n  return (\n    <MemoryCardGame />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isOverlayOn: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case actionTypes.TURN_ON_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: true\r\n            }\r\n        case actionTypes.TURN_OFF_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: false\r\n            }\r\n        default :\r\n             return state\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isUserFirstVisit: true\r\n};\r\n\r\nconst firstVisitReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.TURN_OFF_FIRST_VISIT) {\r\n        return {\r\n            ...state,\r\n            isUserFirstVisit: false\r\n        }\r\n    }\r\n    return state\r\n};\r\n\r\nexport default firstVisitReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    instructionsNumber: 0\r\n};\r\n\r\nconst instructionsReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.INCR_INSTRUCTIONS_NUMBER) {\r\n        console.log('REDCUER Begin')\r\n        const timer = () => {\r\n            console.log('Reducer in timer')\r\n                \r\n                return {\r\n                    ...state,\r\n                    instructionsNumber: state.instructionsNumber + 1\r\n                }\r\n                   \r\n            }\r\n        setInterval(timer, 1500);\r\n\r\n        const loopInstructions = setInterval(timer, 1500)\r\n\r\n        const stopInstructions = () => {    \r\n            clearInterval(loopInstructions)\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nexport default instructionsReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport overlayReducer from './store/reducers/overlayReducer';\nimport firstVisitReducer from './store/reducers/firstVisitReducer';\nimport instructionsReducer from './store/reducers/instructionsReducer';\n\n\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n\nconst rootReducer = combineReducers(\n  {\n    vrlyrdcr: overlayReducer,\n    frsttmvstrdcr: firstVisitReducer,\n    nstrctnsrdcr: instructionsReducer\n  }\n)\nconst store = createStore(rootReducer, persistedState)\n\nstore.subscribe(()=>{\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FirstTime\":\"FirstTime_FirstTime__3J5JD\",\"ImpHolder\":\"FirstTime_ImpHolder__KFj2k\",\"Imp\":\"FirstTime_Imp__3VrQS\",\"WordBox\":\"FirstTime_WordBox__2Sozx\"};"],"sourceRoot":""}