{"version":3,"sources":["MemoryCardGame/components/WorldMapComponent/WorldMap.module.css","MemoryCardGame/components/FirstTimeCompenent/FirstTime.module.css","MemoryCardGame/reusables/gameBoard/GameBoard.module.css","MemoryCardGame/reusables/Overlay/Overlay.module.css","MemoryCardGame/reusables/Images/Imp.png","MemoryCardGame/components/Stages/StageOneComponent/StageOne.module.css","MemoryCardGame/reusables/Images/StageOne/Draftfish.png","MemoryCardGame/reusables/Images/StageOne/DraftfishBlue.png","MemoryCardGame/reusables/Images/StageOne/DraftfishBlack.png","MemoryCardGame/reusables/Images/StageOne/DraftfishDarkGreen.png","MemoryCardGame/reusables/Images/StageOne/DraftfishDarkPurple.png","MemoryCardGame/reusables/Images/StageOne/DraftfishGreen.png","MemoryCardGame/reusables/Images/StageOne/DraftfishGrey.png","MemoryCardGame/reusables/Images/StageOne/DraftfishOrange.png","MemoryCardGame/reusables/Images/StageOne/DraftfishPurple.png","MemoryCardGame/reusables/Images/StageOne/DraftfishRed.png","MemoryCardGame/reusables/Images/StageOne/DraftfishTeal.png","MemoryCardGame/reusables/Images/StageOne/DraftfishYellow.png","MemoryCardGame/reusables/Overlay/Overlay.js","MemoryCardGame/components/FirstTimeCompenent/FirstTime.js","store/actionTypes/actionTypes.js","MemoryCardGame/components/WorldMapComponent/WorldMap.js","MemoryCardGame/reusables/gameBoard/GameBoard.js","MemoryCardGame/reusables/Shuffle/shuffle.js","MemoryCardGame/components/Stages/StageOneComponent/StageOne.js","MemoryCardGame/MemoryCardGame.js","App.js","serviceWorker.js","store/reducers/overlayReducer.js","store/reducers/firstVisitReducer.js","store/reducers/instructionsReducer.js","store/reducers/stageOneReducer.js","index.js"],"names":["module","exports","connect","state","isOverlayOn","vrlyrdcr","props","overlay","className","classes","Overlay","instructionsNum","nstrctnsrdcr","instructionsNumber","dispatch","incrementInstructionNumber","type","console","log","loopInstructions","setInterval","setTimeout","clearInterval","FirstTime","WordBox","ImpHolder","Imp","src","ImpImg","alt","WorldMap","to","StageOne","StageTwo","StageThree","StageFour","GameBoard","cardsArray","cards","map","ele","Card","key","onClick","clicked","Image","shuffle","flashcards","currentIndex","length","temporaryValue","Number","randomIndex","Math","floor","random","isStageOneComplete","stgnrdcr","clickedOnArray","clickedOn","clickedCard","clearClickedOn","draftfish","draftfishBlack","draftfishBlue","draftfishDarkGreen","draftfishDarkPurple","draftfishGreen","draftfishGrey","draftfishOrange","draftfishPurple","draftfishRed","draftfishTeal","draftfishYellow","StageOneBody","every","e","alert","isUserFirstVisit","frsttmvstrdcr","turnOffOverlay","turnOffFirstVisit","firstTime","worldMap","path","exact","render","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","reducer","action","firstVisitReducer","timerIsRunning","instructionsReducer","stageOnereducer","concat","persistedState","localStorage","getItem","JSON","parse","rootReducer","combineReducers","overlayReducer","stageOneReducer","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9db24ce4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorldMap\":\"WorldMap_WorldMap__3K-PS\",\"StageOne\":\"WorldMap_StageOne__2987j\",\"StageTwo\":\"WorldMap_StageTwo__2Mi6l\",\"StageThree\":\"WorldMap_StageThree__1Dqro\",\"StageFour\":\"WorldMap_StageFour__1GHmv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FirstTime\":\"FirstTime_FirstTime__3J5JD\",\"ImpHolder\":\"FirstTime_ImpHolder__KFj2k\",\"Imp\":\"FirstTime_Imp__3VrQS\",\"WordBox\":\"FirstTime_WordBox__2Sozx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__O0q7l\",\"Card\":\"GameBoard_Card__333wC\",\"Image\":\"GameBoard_Image__10me3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Overlay_Overlay__23OZv\"};","module.exports = __webpack_public_path__ + \"static/media/Imp.c33eec6e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StageOneBody\":\"StageOne_StageOneBody__27XxJ\"};","module.exports = __webpack_public_path__ + \"static/media/Draftfish.25e7967e.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishBlue.a82f6201.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishBlack.6417961b.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishDarkGreen.d7260455.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishDarkPurple.4a2a4d86.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishGreen.f6ba1909.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishGrey.8a3b2bce.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishOrange.f9553ff7.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishPurple.49f35f8c.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishRed.a3e53e97.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishTeal.c6b2daac.png\";","module.exports = __webpack_public_path__ + \"static/media/DraftfishYellow.93ff2533.png\";","import classes from './Overlay.module.css';\r\nimport React, {Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Overlay = (props) => {\r\n\r\n    let overlay = null\r\n    if(props.isOverlayOn) {\r\n       overlay = <div className={classes.Overlay}></div>\r\n    }\r\n\r\n\r\n    return  (\r\n        <Fragment>\r\n            {overlay}\r\n        </Fragment>\r\n    )\r\n       \r\n    \r\n        \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Overlay);","import classes from './FirstTime.module.css';\r\nimport React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport ImpImg from '../../reusables/Images/Imp.png'\r\n\r\nconst FirstTime = (props) => {\r\n    let instructionsArray = [\r\n        'Yo, listen up',\r\n        'Here\\'s a story',\r\n        'About a little guy',\r\n        'That lives in a blue world',\r\n        'And all day ',\r\n        'and all night',\r\n        'And everything he sees',\r\n        'is just blue',\r\n        'like him ',\r\n        'inside and outside',\r\n        'Blue his house',\r\n        'With a blue little window',\r\n        'And a blue corvette',\r\n        'And everything is blue',\r\n        'for him',\r\n        'And himself ',\r\n        'and everybody around',\r\n        'Cause he ain\\'t got',\r\n        'nobody',\r\n        'to listen to',\r\n        'to listen to',\r\n        'IM BLUE',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n        'DA BA DEE DA BA DI',\r\n    ]\r\n\r\n\r\n    if(props.instructionsNum === 0) {\r\n        console.log(\"Test is running\")\r\n        let loopInstructions = setInterval( () => { props.incrementInstructionNumber() },1350)\r\n\r\n        setTimeout(()=> {\r\n            clearInterval(loopInstructions)\r\n        }, 35000)        \r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.FirstTime}>\r\n                <div className={classes.WordBox}>\r\n                <p>{instructionsArray[props.instructionsNum]}</p>\r\n                </div>\r\n                <div className={classes.ImpHolder}>\r\n                    <img className={classes.Imp} src={ImpImg} alt=\"Imp\"></img>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        incrementInstructionNumber: () => dispatch({type: actionTypes.INCR_INSTRUCTIONS_NUMBER})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        instructionsNum: state.nstrctnsrdcr.instructionsNumber\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FirstTime);","export const TURN_OFF_OVERLAY = 'TURN_OFF_OVERLAY';\r\nexport const TURN_ON_OVERLAY = 'TURN_ON_OVERLAY';\r\nexport const TURN_OFF_FIRST_VISIT = \"TURN_OFF_FIRST_VISIT\";\r\nexport const INCR_INSTRUCTIONS_NUMBER = 'INCR_INSTRUCTIONS_NUMBER';\r\nexport const STAGE_ONE_CLICKED_ON = \"STAGE_ONE_CLICKED_ON\";\r\nexport const STAGE_ONE_CLEAR_CLICKED_ON = \"STAGE_ONE_CLEAR_CLICKED_ON\";\r\n","import classes from './WorldMap.module.css';\r\nimport React, { Fragment} from 'react';\r\nimport {  Link } from 'react-router-dom';\r\n\r\n\r\nconst WorldMap = () => {\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.WorldMap}>\r\n                < Link to=\"/StageOne\" ><div className={classes.StageOne}>Meet the tttown?</div></Link>\r\n\r\n                < Link to=\"/StageTwo\" ><div className={classes.StageTwo}>learn The negihbors</div></Link>\r\n\r\n                < Link to=\"/StageThree\" ><div className={classes.StageThree}>Kill the invaders</div></Link>\r\n\r\n                < Link to=\"/StageFour\" >\r\n                    <div className={classes.StageFour}>Become the invading aliens\r\n                    <p>a world map with four major clickable sections</p>\r\n                    <p>each section is set to clickable after completing the prior stage</p>\r\n                    <p>LOL I AM ROTFL</p>\r\n                    <p>Components that need to be added</p>\r\n                    <p>a component for each \"level\"</p>\r\n                    <p>I have 0 direction of where this project is headed</p>\r\n                    <p>list characters</p>\r\n                    <p>Should i use routing (browser router or Nextjs) for different stages or just a popup????</p>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default WorldMap;","import classes from './GameBoard.module.css';\r\nimport React from 'react';\r\n\r\nconst GameBoard = (props) => {\r\n\r\n    let cardsArray = [...props.cards];\r\n\r\n    return (\r\n        <div className={classes.GameBoard}>\r\n            {cardsArray.map((ele) =>{\r\n                console.log(ele)\r\n        return (<div \r\n            className={classes.Card}\r\n             key={ele} \r\n             onClick={() => {\r\n            props.clicked(ele)\r\n        }}><img alt='fish' className={classes.Image} src={ele}></img></div>)\r\n    })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GameBoard;","const shuffle = (flashcards) => {\r\n    let currentIndex = flashcards.length\r\n    let temporaryValue = Number;\r\n    let randomIndex = Number;\r\n\r\n    while(currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random()*currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = flashcards[currentIndex]\r\n        flashcards[currentIndex] = flashcards[randomIndex]\r\n        flashcards[randomIndex] = temporaryValue\r\n    }\r\n\r\n    return flashcards\r\n}\r\n\r\nexport default shuffle","import classes from './StageOne.module.css';\r\nimport React from 'react';\r\nimport GameBoard from '../../../reusables/gameBoard/GameBoard';\r\nimport shuffle from '../../../reusables/Shuffle/shuffle';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../../store/actionTypes/actionTypes';\r\n\r\nimport draftfish from '../../../reusables/Images/StageOne/Draftfish.png';\r\nimport draftfishBlue from '../../../reusables/Images/StageOne/DraftfishBlue.png';\r\nimport draftfishBlack from '../../../reusables/Images/StageOne/DraftfishBlack.png';\r\nimport draftfishDarkGreen from '../../../reusables/Images/StageOne/DraftfishDarkGreen.png';\r\nimport draftfishDarkPurple from '../../../reusables/Images/StageOne/DraftfishDarkPurple.png';\r\nimport draftfishGreen from '../../../reusables/Images/StageOne/DraftfishGreen.png';\r\nimport draftfishGrey from '../../../reusables/Images/StageOne/DraftfishGrey.png';\r\nimport draftfishOrange from '../../../reusables/Images/StageOne/DraftfishOrange.png';\r\nimport draftfishPurple from '../../../reusables/Images/StageOne/DraftfishPurple.png';\r\nimport draftfishRed from '../../../reusables/Images/StageOne/DraftfishRed.png';\r\nimport draftfishTeal from '../../../reusables/Images/StageOne/DraftfishTeal.png';\r\nimport draftfishYellow from '../../../reusables/Images/StageOne/DraftfishYellow.png';\r\n\r\n\r\nconst StageOne = (props) => {\r\n\r\n\r\n    let cardsArray = [draftfish, draftfishBlack, draftfishBlue, draftfishDarkGreen, draftfishDarkPurple, draftfishGreen, draftfishGrey,\r\n                        draftfishOrange, draftfishPurple, draftfishRed, draftfishTeal, draftfishYellow\r\n    ]\r\n    \r\n        cardsArray = shuffle(cardsArray)\r\n     \r\n    \r\n    const activateLAsers = () => {\r\n        alert(props.isStageOneComplete);\r\n        props.clearClickedOn();\r\n        \r\n    }\r\n\r\n    const winCondition = () => {\r\n        alert('YOU WIN');\r\n        props.clearClickedOn();\r\n        \r\n    }\r\n\r\n    let addCardToState = (ele) => {\r\n        props.clickedOnArray.every((e) => e !== ele) ? props.clickedOnArray.length === cardsArray.length-1 ? winCondition() : props.clickedOn(ele) : activateLAsers();\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.StageOneBody}>\r\n            <div>\r\n                <div>Char</div>\r\n                <div>SpeechBubble</div>\r\n            </div>\r\n            <GameBoard cards={cardsArray} clicked={addCardToState} />\r\n            <div> A winning screen </div>\r\n            <div>A losing screen</div>\r\n            <p>Button for going home</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isStageOneComplete: state.stgnrdcr.isStageOneComplete,\r\n        clickedOnArray: state.stgnrdcr.clickedOn\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        clickedOn: (ele) => dispatch({type: actionTypes.STAGE_ONE_CLICKED_ON, clickedCard: ele}),\r\n        clearClickedOn: () => dispatch({type: actionTypes.STAGE_ONE_CLEAR_CLICKED_ON})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StageOne);","import React, { Fragment } from 'react';\r\nimport Overlay from './reusables/Overlay/Overlay';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/actionTypes/actionTypes';\r\nimport FirstTime from './components/FirstTimeCompenent/FirstTime';\r\nimport WorldMap from './components/WorldMapComponent/WorldMap';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport StageOne from './components/Stages/StageOneComponent/StageOne';\r\n \r\nconst MemoryCardGame = (props) => {\r\n\r\n    let overlay = null\r\n    let firstTime = null\r\n    let worldMap = <WorldMap />\r\n    \r\n    if(props.isUserFirstVisit){\r\n        overlay = <Overlay />\r\n        firstTime = <FirstTime />\r\n        worldMap = null\r\n        setTimeout(() => {\r\n            props.turnOffOverlay();\r\n            props.turnOffFirstVisit();\r\n        }, 30000);\r\n    }\r\n\r\n    return ( \r\n    <Fragment>\r\n        <HashRouter>\r\n            <Route path='/' exact render={() => {\r\n                return (<div>\r\n                    {overlay}\r\n                    {firstTime}\r\n                    {worldMap}\r\n                </div>)\r\n            } } />\r\n\r\n            <Route path='/StageOne' exact render={ () => <StageOne />} />\r\n            <Route path='/StageTwo' exact render={ () => <p>Stage2</p>} />\r\n            <Route path='/StageThree' exact render={ () => <p>Stage3</p>} />\r\n            <Route path='/StageFour' exact render={ () => <p>Stage4</p>} />\r\n        </HashRouter>\r\n    </Fragment> \r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        turnOffOverlay: () => dispatch({type: actionTypes.TURN_OFF_OVERLAY}),\r\n        turnOffFirstVisit: () => dispatch({type: actionTypes.TURN_OFF_FIRST_VISIT})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOn: state.vrlyrdcr.isOverlayOn,\r\n        isUserFirstVisit: state.frsttmvstrdcr.isUserFirstVisit\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoryCardGame);","import React from 'react';\nimport './App.css';\nimport MemoryCardGame from './MemoryCardGame/MemoryCardGame';\n\nfunction App() {\n  return (\n    <MemoryCardGame />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isOverlayOn: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case actionTypes.TURN_ON_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: true\r\n            }\r\n        case actionTypes.TURN_OFF_OVERLAY : \r\n            return {\r\n                ...state,\r\n                isOverlayOn: false\r\n            }\r\n        default :\r\n             return state\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isUserFirstVisit: true\r\n};\r\n\r\nconst firstVisitReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.TURN_OFF_FIRST_VISIT) {\r\n        return {\r\n            ...state,\r\n            isUserFirstVisit: false\r\n        }\r\n    }\r\n    return state\r\n};\r\n\r\nexport default firstVisitReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    timerIsRunning: true,\r\n    instructionsNumber: 0\r\n};\r\n\r\nconst instructionsReducer = (state = initialState, action) => {\r\n    if(action.type === actionTypes.INCR_INSTRUCTIONS_NUMBER) {\r\n        console.log('REDCUER Instruction number Begin')\r\n        \r\n            return {\r\n                ...state,\r\n                instructionsNumber: state.instructionsNumber + 1\r\n            }\r\n            \r\n\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nexport default instructionsReducer;","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n    isStageOneComplete: false,\r\n    clickedOn: []\r\n};\r\n\r\nconst stageOnereducer = (state = initialState, action) => {\r\n\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_CLICKED_ON){\r\n\r\n        console.log(action.clickedCard)\r\n        return {\r\n            ...state,\r\n            clickedOn: [...state.clickedOn.concat([action.clickedCard])]\r\n        }\r\n    }\r\n\r\n    if(action.type === actionTypes.STAGE_ONE_CLEAR_CLICKED_ON){\r\n        return {\r\n            ...state,\r\n            clickedOn: []\r\n        }\r\n    }\r\n\r\n    return state\r\n};\r\n\r\nexport default stageOnereducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport overlayReducer from './store/reducers/overlayReducer';\nimport firstVisitReducer from './store/reducers/firstVisitReducer';\nimport instructionsReducer from './store/reducers/instructionsReducer';\nimport stageOneReducer from './store/reducers/stageOneReducer'\n\n\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n\nconst rootReducer = combineReducers(\n  {\n    vrlyrdcr: overlayReducer,\n    frsttmvstrdcr: firstVisitReducer,\n    nstrctnsrdcr: instructionsReducer,\n    stgnrdcr: stageOneReducer\n  }\n)\nconst store = createStore(rootReducer, persistedState)\n\nstore.subscribe(()=>{\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={ store }>\n        <App />\n      </Provider>\n    </BrowserRouter>\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}